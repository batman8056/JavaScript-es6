whats is object-oriented programming
*************************************
Object is an instance of class
class is a template for class
 
class -> home blueprint
object -> actual home

A programming paradiagram centered 
              ----------
around object rather than functions.
       ------
                                                
OOPS is not a programming language or tool.

OOPS is group of related variable and function we called as a unite.

variable is a property
function is a method


supported
C#, java, Ruby, Python, Javascript

Procedural Programming:-
 ->usually we have one program set of functionlity 
can process the data then give the output.

Why we need OOPS ?
-------------------
example:
we take video game, player is the one of the object
we stored player health, position and size multiple 
data can be stored in single player.

class is a common template we can reuse it in many object 


4 Pillars of OOPS
*******************
1. Encapsulation
2. Abstraction
3. Inheritance
4. Polymorphism

Variable called property
function called method

1. Encapsulation
-----------------
we can be group the data,function and method reduce complexity,
increase reusability

hiding data prevent direct access from outside.

access through function (Getter and Setter)
getter->get the information
setter->modify the information

example pls check empgetWage.js

2. Abstraction
-----------------
Only show essential detail
hide all other details like property and method

Reduce complexity also isolate impact of change
simple iterface
Reduce the impact of change

Java:-
Interface(show outside) and Implementation(hide from outside)


3. Inheritance
---------------
Allow classes to use data and method from another class

*eliminate redundant code
*Inheritance some other property and method

          Superclass
   |-----------|----------|---
subclass1   subclass2   subclass3
    |
   -|--------------|
  subclass4  subclass5

subclass Inherit from Superclass

access modifiers:-
changes where class data can be accessed from
(public(default), private and protected)

4. Poly  morphism
-----------------
    |      |
  Many   Form

Ability of methods to take more than one from

*Refactor ugly switch/case statements
many form

Javascript has a dynamic type system:-

-Occurs during runtime
-Both Superclass and subclass have same method


    Objects
$$$--------$$$

Creating Objects:-
=>Object Literal is a simple way of define the object
Example: 2_objLiteral.js

Factories and Constractors:-
=> factors and constracter are functions.
Example: 3_constFactorial.js

Constractor Property:-
=> every object have constracter property
Example:  3_constFactorial.js

Function are object:-
=>
Example: 3_constFactorial.js

Value (Primitives) vs Referance Type:-

Priimitive are copy by their value.
Object are copied by their Referance.
=>Value(number, string, Boolean, Symbol, undefine, null)
=>Referance(Object, Array, Function)
Example: 4_valueReferance.js

Adding and removing properties:-
=> using dot and bracket notation
Example:5_addRemovProperties.js


Enumerating propertys:-
=>using for loop and if condition.
Example:5_addRemovProperties.js


Abstraction:-
=>Hide the details, show the essentials.
example: 6_Abstraction.js

Private properties:-
=>scope of the object and property it can store the value in the memory
Example: 6_Abstraction.js

Getter and Settre:-
=>get the value outside of the constracter 
=>set the value outside of the constracter 
Example: 7_getterAndSetter.js


Referance
index.html
Object.js